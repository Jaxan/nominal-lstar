{-# language DeriveAnyClass #-}
{-# language DeriveGeneric #-}
module Examples.NonResidual where

{- The language { u d e v d f | u,v words and d,e,f atoms such that e!=f }
   This should be non-guessing and non-residual 5-state NFA.

   This cannot be learned by NL*, because the poset of residual languages
   is too complicated. (It is not generated by an orbit-finite set of
   join-irreducible elements.)
-}

import NLambda

import GHC.Generics (Generic)
import Prelude (Eq, Ord, Show)
import qualified Prelude ()

-- Parametric in the alphabet, because why not?
data NonResidual a = Q1 | Q2 a | Q3 a a | Q4 a | Q5
  deriving (Eq, Ord, Show, Generic, Nominal, Contextual)

exampleNonResidual :: Automaton (NonResidual Atom) Atom
exampleNonResidual = automaton
    -- state space
    (fromList [Q1, Q5]
        `union` map Q2 atoms
        `union` map Q4 atoms
        `union` pairsWith Q3 atoms atoms)
    -- alphabet
    atoms
    -- transition relation
    (map (\d -> (Q1, d, Q1)) atoms
        `union` map (\d -> (Q1, d, Q2 d)) atoms
        `union` pairsWith (\d e -> (Q2 d, e, Q3 d e)) atoms atoms
        `union` triplesWith (\d e f -> (Q3 d e, f, Q3 d e)) atoms atoms atoms
        `union` pairsWith (\d e -> (Q3 d e, d, Q4 e)) atoms atoms
        `union` pairsWithFilter (\e f -> maybeIf (e `neq` f) (Q4 e, f, Q5)) atoms atoms)
    -- initial states
    (singleton Q1)
    -- final states
    (singleton Q5)
